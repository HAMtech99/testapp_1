AWSTemplateFormatVersion: "2010-09-09"
Description: Deploy EC2 instance in a VPC using CloudFormation



Resources:
  VPC:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: "10.0.0.0/16"
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: "Name"
          Value: "testapp1_vpc"

  InternetGateway:
    Type: "AWS::EC2::InternetGateway"
    Properties:
      Tags:
        - Key: "Name"
          Value: "testapp1_igw"

  AttachGateway:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref VPC
      CidrBlock: "10.0.1.0/24"
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ 0, !GetAZs "" ]
      Tags:
        - Key: "Name"
          Value: "testapp1-publicsubnet"

  PublicSubnet:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref VPC
      CidrBlock: "10.0.1.0/24"
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ 1, !GetAZs "" ]
      Tags:
        - Key: "Name"
          Value: "testapp1-publicsubnet2"

  RouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: "Name"
          Value: "testapp1-routetable"

  PublicRoute:
    Type: "AWS::EC2::Route"
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref InternetGateway

  SubnetRouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref RouteTable

  SecurityGroup:
     Type: "AWS::EC2::SecurityGroup"
     Properties:
       GroupDescription: "Enable SSH and HTTP access"
       VpcId: !Ref VPC
       SecurityGroupIngress:
         - IpProtocol: tcp
           FromPort: 22
           ToPort: 22
           CidrIp: 0.0.0.0/0
         - IpProtocol: tcp
           FromPort: 80
           ToPort: 80
           CidrIp: 0.0.0.0/0
           

  
  EC2Instance:
    Type: "AWS::EC2::Instance"
    Properties:
      InstanceType: "t2.micro"
      ImageId: "ami-0bfddf4206f1fa7b9"
      SubnetId: !Ref PublicSubnet1
      KeyName: "mytestappssh"  
      Tags:
        - Key: Name
          Value: "Testappinstance1"
     
      SecurityGroupIds:
         - !Ref SecurityGroup
      UserData: 
        Fn::Base64: 
          !Sub |
            #!/bin/bash
            #Update system
            dnf update -y
            dnf install docker -y

            #start and enable docker
            systemctl start docker
            systemctl enable docker

            #Add ec2-user to the docker group
            usermod -a -G docker ec2-user

            #Pull docker image
            docker pull cloudkid99/testapp_1

            #Run the docker container and expose port 80
            docker run -d -p 80:80 cloudkid99/testapp_1

          
          

  EC2Instance:
    Type: "AWS::EC2::Instance"
    Properties:
      InstanceType: "t2.micro"
      ImageId: "ami-0bfddf4206f1fa7b9"
      SubnetId: !Ref PublicSubnet2
      KeyName: "mytestappssh"  
      Tags:
        - Key: Name
          Value: "Testappinstance2"

      SecurityGroupIds:
         - !Ref SecurityGroup
      UserData: 
        Fn::Base64: 
          !Sub |
            #!/bin/bash
            #Update system
            dnf update -y
            dnf install docker -y

            #start and enable docker
            systemctl start docker
            systemctl enable docker

            #Add ec2-user to the docker group
            usermod -a -G docker ec2-user

            #Pull docker image
            docker pull cloudkid99/testapp_1

            #Run the docker container and expose port 80
            docker run -d -p 80:80 cloudkid99/testapp_1

Outputs:
  InstancePublicIP:
    Description: "Public IP of the EC2 instance"
    Value: !GetAtt EC2Instance.PublicIp
