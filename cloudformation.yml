AWSTemplateFormatVersion: "2010-09-09"
Description: Deploy EC2 instances in a VPC using CloudFormation, ALB and ASG

Resources:
#VPC Creation
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      Cidrblock: "10.0.0.0/16"
      EnableDnsSupport: true
      EnableDnsHostname: true
      Tags:
        - Key: Name
          Value: WebAppVpc

# IGW Creation
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      VpcId: !Ref VPC
      CidrBlock: "10.0.0.0/24"
      MapPublicOnLaunch: true
      AvailabilityZone: us-west-2a
      Tags:
        -Key: Name
        Value: WebAppInternetGateway
# Attach VPC to IGW
  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGateway: !Ref InternetGateway

# Public subnet us-west-2a
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: "10.0.1.0/24"
      MapPublicOnLaunch: true
      AvailabilityZone: us-west-2a
      Tags:
        -Key: Name
        Value: WebbAppPublicSubnet1

# Public subnet us-west-2b
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: "10.0.2.0/24"
      MapPublicOnLaunch: true
      AvailabilityZone: us-west-2b
      Tags: 
        - Key: Name
          Value: WebAppPublicSubnet2

# Route table for VPC
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: WebAppPublicRouteTable
    
# Associate Public Subnet 1 with Route Table
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
     SubnetId: !Ref PublicSubnet1
     RouteTableId: !Ref PublicRouteTable
  
# Associate Public Subnet 2 with Route Table
  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
     SubnetId: !Ref PublicSubnet2
     RouteTableId: !Ref PublicRouteTable

# Route to the internet
  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

# Security group for Web App
  WebAppSecurityGroup:
    Type: AWS:EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP Access via port 80 and SSH access
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0

# Launch Template for EC2 Instances
  WebAppLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        ImageId: "ami-0f08923e56e1e1cfe"
        InstanceType: t2.micro
        KeyName: "mytestappssh"
        SecurityGroupIds:
          - !GetAtt WebAppSecurityGroup.GroupId
        NetworkInterfaces:
          - AssociatePublicIpAddresses: true
            DeviceIndex: 0
        TagSpecifications:
          - ResourceType: instance
            Tags: Name
            Value: WebAppInstance

# ASG for EC2 instances
  WebAppAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchTemplate:
        LaunchTemplateId: !Ref WebAppLaunchTemplate.LatestVersionNumber
      MinSize: 2
      MaxSize: 2
      DesiredCapacity: 2
      VPCZoneIdenitifer:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      Tags:
        - Key: Name
          Value: WebAppInstance
          PropagateAtLaunch: true

# Appication Load Balancer
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties: 
      Name: WebAppALB
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !GetAtt WebAppSecurityGroup.GroupId
      Scheme: internet-facing

# Target Group for ALB
  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: WebAppTargetGroup
      VpcId: !Ref VPC
      Protocol: HTTP
      Port: 80
      TargetType: instance
      HealthCheckProtocol: HTTP
      HealthCheckPort: 80
      Matcher:
        HttpCode: 200-399

# Listener for ALB
  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerARN: !Ref ApplicationLoadBalancer
      Protocol: HTTP
      Port: 80
      DefaultActions:
        - Type: forward
          TargetGroupARN: !Ref ALBTargetGroup

# ASG to ALB Target group attachment
  ASGToALBAttachment:
    Type: AWS::Autoscaling::LifecylceHook
    Properties:
      AutoScalingGroupName: !Ref WebAppAutoScalingGroup
      LifecycleTransition: autoscaling:EC2_INSTANCE_LAUNCHING
      DefaultResult: continue
      HeartbeatTimeout: 300
      NotificationTargetARN: !Ref ALBTargetGroup

  Outputs:
    VpcId:
      Description: The VPC ID
      Value: !Ref VPC

    PublicSubnet1Id:
      Description: ID of Public Subnet 1
      Value: !Ref PublicSubnet1

    PublicSubnet2Id:
      Description: ID of Public Subnet 2
      Value: !Ref PublicSubnet2

    AutoScalingGroupName:
      Description: The name of the ASG
      Value: !Ref WebAppAutoScalingGroup

    LoadBalancerDNSName:
      Description: The DNS Name of the ALB
      Value: !GetAtt ApplicationLoadBalancer.DNSName